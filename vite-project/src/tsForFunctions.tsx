/* Давайте разберемся как прописать тип для функций. И мы сразу видим предупреждение от TS о том, что тип переменной title может быть любой, то есть any и нам
нужно прописать более конкретно какой тип данных мы хотим здесь использовать. Предположим у title будет строчный тип данных.
Как прописать тип для самой функции? У нас есть стрелочна функция, которая принимает в параметрах title, нужно уточнить тип данных для нее. Чтобы прописать тип
для самой функции можно так type PrintTitle = Function. Давайте используем этот type, мы видим, что это общее определение. Можно сделать запись более точной. 
Во первых мы можем сказать, что этот тайп принимает title: string (тип title - string) Но чтобы корректно полностью прописать тип функции не только то, что мы
принимаем на вход, но и то, что функция возвращает. Наша функция ничего не возвращает, вернее возвращает undefined, поэтому здесь мы можем указать слово 
=> void. Соответственно если функция будет что-то возвращать, например return title, тогда пишем => string То есть точно также как с переменными, прописываем
тип данных, которые функция возвращает, точно также в теории мы можем указать тип any, но это не рекомендуется, ибо какой смысл использовать тайпскрипт. 
Еще может быть так, что нам не известен какой-то тип данных, тогда используем unknown. Он накладывает ограничения, например const test: unknown = 'test' 
сейчас есть переменная которая содержит срочное значение, но определена как неизвестная. И если мы захотим использовать для этой переменной какой-то метод для
строк, то будет ошибка.
 */

// type PrintTitle: () => { void}

// type PrintTitle = Function; // Мы видим, что это очень общее определение. Точно также значение title не определено.
type PrintTitle = (title: string) => void; //возвращает undefined
// type PrintTitle = (title: string) => string; // возвращает строку.


const printTitle: PrintTitle = (title: string) => {
    console.log(title);
}

printTitle('peperoni')


export { }